#!/usr/bin/env python
#
# Warnup
# Written by Steve Gattuso <steve@stevegattuso.me>
#
# An easier way of deploying code when you can't do it
# the easy way
#
from xtermcolor import colorize
import sys, os, subprocess, ConfigParser, datetime

def get_config():
    working_dir = os.getcwd()
    if(os.path.exists(os.path.join(working_dir, ".warnup")) is False):
        return None
    
    config = ConfigParser.RawConfigParser()
    config.read(os.path.join(working_dir, ".warnup"))

    return config

def show_help():
    print("Warnup usage:")
    print("  warnup [action] [arguments]\n")
    print("Actions:")
    print("  push [file] - Deploys file into production path")
    print("  diff [file] - Shows a diff between the local/production versions")

def print_error(message):
    print(colorize("[error]", 0xff0000) + " %s" % message)

def print_notice(message):
    print(colorize("[notice]", 0xffff00) + " %s" % message)

def print_success(message):
    print(colorize("[success]", 0x0DFF00) + " %s" % message)

def config_error():
    print_error("Cannot find warnup configuration file in your current working directory (.warnup)")
    sys.exit(1)

def run_diff():
    config = get_config()

    if(config == None):
        config_error()

    if(len(sys.argv) < 3):
        print_error("File not specified")
        return

    # Get the paths
    development = config.get("paths", "development")
    production = config.get("paths", "production")
    dev_path = os.path.join(development, sys.argv[2])
    prod_path = os.path.join(production, sys.argv[2])

    if(os.path.exists(dev_path) == False):
        print_error("File %s cannot be found on development" % sys.argv[2])
        return

    if(os.path.exists(prod_path) == False):
        print_notice("File %s does not exist on production" % sys.argv[2])
        print("Try:\n  $ warnup push %s" % sys.argv[2])
        return

    subprocess.call(["meld", dev_path, prod_path])

def run_push():
    config = get_config()

    if(config == None):
        config_error()

    if(len(sys.argv) < 3):
        print_error("File not specified")
        return

    # Get the paths
    development = config.get("paths", "development")
    production = config.get("paths", "production")
    dev_path = os.path.join(development, sys.argv[2])
    prod_path = os.path.join(production, sys.argv[2])

    if(os.path.exists(dev_path) == False):
        print_error("File %s cannot be found on development" % sys.argv[2])
        return

    if(os.path.exists(prod_path) == False):
        print_notice("File %s does not exist on production" % sys.argv[2])
        print("Try:\n  $ warnup push %s" % sys.argv[2])
        return

    # Get a temporary path
    split = list(os.path.split(prod_path))
    split[-1] += ".temp"
    temp_path = os.path.join(split[0], split[1])

    print_notice("Creating backup at %s" % temp_path)
    subprocess.call(["mv", prod_path, temp_path])
    subprocess.call(["cp", dev_path, prod_path])
    print_success("%s successfully pushed" % sys.argv[2])

    ans = raw_input("\nWould you like to save, delete, or restore the backup file? (s/d/r) ")
    if(ans == "d"):
        subprocess.call(["rm", temp_path])
        print_success("Backup file deleted")

    elif(ans == "r"):
        subprocess.call(["rm", prod_path])
        subprocess.call(["mv", temp_path, prod_path])
        print_success("%s has been restored to its original state" % sys.argv[2])

    elif(ans == "s"):
        split = list(os.path.split(dev_path))
        datestr = datetime.datetime.now().strftime("%Y-%m-%d")
        split[-1] += ".%s.backup" % datestr
        save_path = os.path.join(split[0], split[1])
        subprocess.call(["mv", temp_path, save_path])
        print_success("Backup file saved to development")

def main():
    # Check the action
    if(len(sys.argv) == 1):
        show_help()
    elif(sys.argv[1] == "diff"):
        run_diff()
    elif(sys.argv[1] == "push"):
        run_push()


if __name__ == "__main__":
    main()
